# Generated by Django 5.2.3 on 2025-06-20 14:32

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AuthenticationLogs",
            fields=[
                ("auth_log_id", models.AutoField(primary_key=True, serialize=False)),
                ("timestamp", models.DateTimeField()),
                ("auth_method", models.TextField()),
                ("status", models.TextField()),
                ("notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "authentication_logs",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BeanVarietals",
            fields=[
                ("varietal_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.TextField(unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "bean_varietals",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Blends",
            fields=[
                ("blend_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.TextField(unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "blends",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Consumables",
            fields=[
                ("consumable_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.TextField(unique=True)),
                ("unit_of_measure", models.TextField()),
                ("current_stock_level", models.FloatField(blank=True, null=True)),
                ("reorder_point", models.FloatField(blank=True, null=True)),
                ("unit_cost", models.FloatField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "consumables",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CuppingAttributeScores",
            fields=[
                ("score_id", models.AutoField(primary_key=True, serialize=False)),
                ("attribute_name", models.TextField()),
                (
                    "score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("attribute_notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "cupping_attribute_scores",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CuppingEvaluations",
            fields=[
                ("evaluation_id", models.AutoField(primary_key=True, serialize=False)),
                ("evaluation_date", models.DateTimeField()),
                (
                    "overall_score",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "cupping_evaluations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Customers",
            fields=[
                ("customer_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.TextField()),
                ("contact_person", models.TextField(blank=True, null=True)),
                ("phone", models.TextField(blank=True, null=True)),
                ("email", models.TextField(blank=True, null=True)),
                ("address", models.TextField(blank=True, null=True)),
                ("branding_code", models.TextField(blank=True, null=True, unique=True)),
            ],
            options={
                "db_table": "customers",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DeliveryManifestItems",
            fields=[
                (
                    "manifest_item_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("quantity", models.IntegerField()),
                ("status", models.TextField()),
            ],
            options={
                "db_table": "delivery_manifest_items",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DeliveryManifests",
            fields=[
                ("manifest_id", models.AutoField(primary_key=True, serialize=False)),
                ("manifest_number", models.TextField(unique=True)),
                ("delivery_type", models.TextField()),
                ("dispatch_date", models.DateTimeField()),
                ("actual_delivery_date", models.DateTimeField(blank=True, null=True)),
                ("status", models.TextField()),
                ("notes", models.TextField(blank=True, null=True)),
                ("delivery_partner", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "delivery_manifests",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DeliveryReceipts",
            fields=[
                ("dr_id", models.AutoField(primary_key=True, serialize=False)),
                ("dr_number", models.TextField(unique=True)),
                ("delivery_date", models.DateTimeField()),
                ("notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "delivery_receipts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Farms",
            fields=[
                ("farm_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.TextField(unique=True)),
                ("address", models.TextField(blank=True, null=True)),
                ("city", models.TextField(blank=True, null=True)),
                ("state", models.TextField(blank=True, null=True)),
                ("country", models.TextField()),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                ("contact_person", models.TextField(blank=True, null=True)),
                ("phone", models.TextField(blank=True, null=True)),
                ("email", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "farms",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="FinalProducts",
            fields=[
                ("product_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.TextField(unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("unit_price", models.FloatField(blank=True, null=True)),
                ("weight_grams_per_unit", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "final_products",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="GreenBeanLots",
            fields=[
                ("lot_id", models.AutoField(primary_key=True, serialize=False)),
                ("lot_identifier", models.TextField(unique=True)),
                ("supplier_name", models.TextField(blank=True, null=True)),
                ("arrival_date", models.DateTimeField()),
                ("initial_weight_kg", models.FloatField()),
                ("current_stock_kg", models.FloatField()),
                ("quality_grade", models.TextField(blank=True, null=True)),
                ("moisture_content_percent", models.FloatField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "green_bean_lots",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="GreenBeanProcessingLog",
            fields=[
                ("log_event_id", models.AutoField(primary_key=True, serialize=False)),
                ("event_type", models.TextField()),
                ("timestamp", models.DateTimeField()),
                ("weight_change_kg", models.FloatField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "green_bean_processing_log",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="JobOrders",
            fields=[
                ("job_id", models.AutoField(primary_key=True, serialize=False)),
                ("job_identifier", models.TextField(unique=True)),
                ("job_type", models.TextField()),
                ("request_date", models.DateTimeField()),
                ("target_quantity_kg", models.FloatField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
                ("status", models.TextField()),
                ("production_path_notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "job_orders",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Locations",
            fields=[
                ("location_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.TextField()),
                ("type", models.TextField()),
                ("address", models.TextField(blank=True, null=True)),
                ("city", models.TextField(blank=True, null=True)),
                ("state", models.TextField(blank=True, null=True)),
                ("zip_code", models.TextField(blank=True, null=True)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "locations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MachineHealthLogs",
            fields=[
                ("health_log_id", models.AutoField(primary_key=True, serialize=False)),
                ("timestamp", models.DateTimeField()),
                ("subsystem_name", models.TextField()),
                ("test_result", models.TextField()),
                ("failure_details", models.TextField(blank=True, null=True)),
                ("status_code", models.TextField(blank=True, null=True)),
                ("alarm_triggered", models.BooleanField(blank=True, null=True)),
                ("operator_action_suggestion", models.TextField(blank=True, null=True)),
                ("resolution_notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "machine_health_logs",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Messages",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("timestamp", models.DateTimeField(blank=True, null=True)),
                ("topic", models.TextField()),
                ("payload", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "messages",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="MobileUnitLocationHistory",
            fields=[
                (
                    "location_history_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("timestamp", models.DateTimeField()),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                ("battery_level", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "mobile_unit_location_history",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="PackagedProducts",
            fields=[
                (
                    "packaged_item_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("packaged_item_qr_code", models.TextField(unique=True)),
                ("packaging_date", models.DateTimeField()),
                ("best_before_date", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "packaged_products",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="PackagingMaterials",
            fields=[
                ("material_id", models.AutoField(primary_key=True, serialize=False)),
                ("type", models.TextField()),
                ("size_grams", models.IntegerField(blank=True, null=True)),
                ("cost_per_unit", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "packaging_materials",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="PurchaseOrderItems",
            fields=[
                ("po_item_id", models.AutoField(primary_key=True, serialize=False)),
                ("quantity_ordered", models.FloatField()),
                ("quantity_received", models.FloatField(blank=True, null=True)),
                ("unit_price_at_order", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "purchase_order_items",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="PurchaseOrders",
            fields=[
                ("po_id", models.AutoField(primary_key=True, serialize=False)),
                ("po_number", models.TextField(unique=True)),
                ("supplier_name", models.TextField()),
                ("order_date", models.DateTimeField()),
                ("expected_delivery_date", models.DateTimeField(blank=True, null=True)),
                ("actual_delivery_date", models.DateTimeField(blank=True, null=True)),
                ("total_amount", models.FloatField(blank=True, null=True)),
                ("status", models.TextField()),
                ("payment_method", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "purchase_orders",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RoastBatches",
            fields=[
                ("batch_id", models.AutoField(primary_key=True, serialize=False)),
                ("batch_identifier", models.TextField(unique=True)),
                ("timestamp_start", models.DateTimeField()),
                ("timestamp_end", models.DateTimeField()),
                (
                    "initial_green_weight_grams",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "final_roasted_weight_grams",
                    models.FloatField(blank=True, null=True),
                ),
                ("roast_duration_minutes", models.FloatField(blank=True, null=True)),
                ("shrinkage_percent", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "roast_batches",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RoastedCoffeeBins",
            fields=[
                ("bin_id", models.AutoField(primary_key=True, serialize=False)),
                ("bin_qr_code", models.TextField(unique=True)),
                ("net_weight_kg", models.FloatField()),
                ("fill_date", models.DateTimeField()),
                ("status", models.TextField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "roasted_coffee_bins",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Roasters",
            fields=[
                ("roaster_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.TextField(unique=True)),
                ("model", models.TextField(blank=True, null=True)),
                ("capacity_grams", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "roasters",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RoasterTelemetryLogs",
            fields=[
                ("log_id", models.BigAutoField(primary_key=True, serialize=False)),
                ("timestamp", models.DateTimeField()),
                ("temperature_bean_probe", models.FloatField(blank=True, null=True)),
                ("temperature_environment", models.FloatField(blank=True, null=True)),
                ("status", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "roaster_telemetry_logs",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RoastProfiles",
            fields=[
                ("profile_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.TextField(unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("target_temp_c", models.FloatField(blank=True, null=True)),
                ("target_duration_minutes", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "roast_profiles",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="StorageZones",
            fields=[
                ("zone_id", models.AutoField(primary_key=True, serialize=False)),
                ("zone_identifier", models.TextField(unique=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("zone_type", models.TextField(blank=True, null=True)),
                ("capacity_kg", models.FloatField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "storage_zones",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Users",
            fields=[
                ("user_id", models.AutoField(primary_key=True, serialize=False)),
                ("username", models.TextField(unique=True)),
                ("password_hash", models.TextField()),
                ("role", models.TextField()),
                ("contact_info", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "users",
                "managed": False,
            },
        ),
    ]
